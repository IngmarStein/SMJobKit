<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>net.nevir.SMJobKit.Application</string>
	<key>InjectionTargets</key>
	<array>
		<string>com.apple.dt.unit.cocoaApplication</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>includeSMJobKitService</string>
			<key>Name</key>
			<string>Include SMJobKit Service</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Description</key>
			<string>Whether the application should also bundle a SMJobKit-based system service.</string>
			<key>Type</key>
			<string>checkbox</string>
			<key>Default</key>
			<string>false</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<array>
					<dict>
						<key>Components</key>
						<array>
							<dict>
								<key>Identifier</key>
								<string>net.nevir.SMJobKit.Service</string>
								<key>Name</key>
								<string>___VARIABLE_smjServiceName:RFC1034Identifier___</string>
								<key>Dependents</key>
								<array>
									<string>0</string>
								</array>
							</dict>
						</array>
						<key>Targets</key>
						<array>
							<dict>
								<key>SharedSettings</key>
								<dict>
									<key>CODE_SIGN_IDENTITY</key>
									<string>Mac Developer</string>
								</dict>
								<key>BuildPhases</key>
								<array>
									<dict>
										<key>Class</key>
										<string>ShellScript</string>
										<key>ShellPath</key>
										<string>/usr/bin/env ruby</string>
										<key>ShellScript</key>
										<string># Postprocessing for your info.plist.  Primarily so that we can inject your full dev certificate name.

require &apos;cgi&apos;
require &apos;fileutils&apos;

missing_keys = [&apos;BUILD_DIR&apos;, &apos;CODE_SIGN_IDENTITY&apos;, &apos;TARGET_BUILD_DIR&apos;, &apos;INFOPLIST_PATH&apos;] - ENV.keys
raise &quot;Missing required ENV values: #{missing_keys.inspect}&quot; if missing_keys.size &gt; 0

files_to_postprocess = [ENV[&apos;INFOPLIST_PATH&apos;]]


# FULL_CODE_SIGN_IDENTITY
# -----------------------
dummy_path = &quot;#{ENV[&apos;BUILD_DIR&apos;]}/SMJobKitCodeSigningDummy&quot;

identity = ENV[&apos;CODE_SIGN_IDENTITY&apos;]
# If you use the generic code signing identity, chances are that it&apos;ll conflict.
identity = &quot;#{identity}:&quot; if identity.end_with? &apos; Developer&apos;

# We can&apos;t seem to get direct access to the code signing certificate that Xcode has
# selected at this point :(
`touch #{dummy_path}`
`codesign --force --sign &quot;#{identity}&quot; &quot;#{dummy_path}&quot;`
result = `codesign --display --verbose --verbose &quot;#{dummy_path}&quot; 2&gt;&amp;1`
`rm #{dummy_path}`

ENV[&apos;FULL_CODE_SIGN_IDENTITY&apos;] = result[/Authority\=(.*#{Regexp.escape(identity)}.*)/, 1]


# Actual Preprocessing
# --------------------

files_to_postprocess.each do |path|
  target_path = File.join(ENV[&apos;TARGET_BUILD_DIR&apos;], path)

  input = open(target_path).read
  open(target_path, &apos;w&apos;) do |output|
    # Specify macros via [[[VAR_NAME]]] to avoid clashes w/ regular plist preprocessing.
    output.write input.gsub(/\[\[\[([A-Z_]+)\]\]\]/) { CGI.escapeHTML(ENV[$1]) }
  end
end</string>
									</dict>
									<dict>
										<key>Class</key>
										<string>CopyFiles</string>
										<key>DstPath</key>
										<string>Contents/Library/LaunchServices</string>
										<key>DstSubfolderSpec</key>
										<integer>1</integer>
									</dict>
								</array>
							</dict>
						</array>
						<key>Nodes</key>
						<array>
							<string>README-SMJobKit.md</string>
							<string>Info.plist:SMPrivilegedExecutables</string>
							<string>___VARIABLE_smjServiceName:RFC1034Identifier___.swift</string>
							<string>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:installSMJServices</string>
							<string>AppDelegate.swift:implementation:methods:installServices</string>
							<string>AppDelegate.swift:implementation:methods:installServices:___VARIABLE_smjServiceName:RFC1034Identifier___</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>README-SMJobKit.md</key>
							<dict>
								<key>Path</key>
								<string>README-SMJobKit.md</string>
							</dict>
							<key>Info.plist:SMPrivilegedExecutables</key>
							<string>
                &lt;key&gt;SMPrivilegedExecutables&lt;/key&gt;
                &lt;dict&gt;
                &lt;key&gt;___VARIABLE_bundleIdentifierPrefix:bundleIdentifier___.[[[PROJECT_NAME]]].___VARIABLE_smjServiceName:RFC1034Identifier___&lt;/key&gt;
                &lt;string&gt;identifier ___VARIABLE_bundleIdentifierPrefix:bundleIdentifier___.[[[PROJECT_NAME]]].___VARIABLE_smjServiceName:RFC1034Identifier___ and certificate leaf[subject.CN] = &quot;[[[FULL_CODE_SIGN_IDENTITY]]]&quot;&lt;/string&gt;
                &lt;/dict&gt;
              </string>
							<key>___VARIABLE_smjServiceName:RFC1034Identifier___.swift</key>
							<dict>
								<key>Path</key>
								<string>___VARIABLE_smjServiceName:RFC1034Identifier___.swift</string>
								<key>Group</key>
								<string>Service Clients</string>
							</dict>
							<key>AppDelegate.swift:implementation:methods:installServices</key>
							<dict>
								<key>Beginning</key>
								<string>private func installServices() {</string>
								<key>End</key>
								<string>}</string>
								<key>Indent</key>
								<integer>1</integer>
							</dict>
							<key>AppDelegate.swift:implementation:methods:installServices:___VARIABLE_smjServiceName:RFC1034Identifier___</key>
							<string>if ___VARIABLE_smjServiceName:RFC1034Identifier___.isLatestVersionInstalled {
	return
}

var error: NSError? = nil
// The user will be prompted with the following:
//
// &lt;Your Custom Message Here&gt;
// ___VARIABLE_productName___ is trying to install a new
// helper tool.  Type your password to allow this.
if !___VARIABLE_smjServiceName:RFC1034Identifier___.installWithPrompt(&quot;&lt;Your Custom Message Here&gt;&quot;, error:&amp;error) {
	// Let the user know something went wrong!
}</string>
							<key>AppDelegate.swift:implementation:methods:applicationDidFinishLaunching:installSMJServices</key>
							<string>installServices()</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>smjServiceName</string>
			<key>Required</key>
			<true/>
			<key>Name</key>
			<string>Service Name</string>
			<key>SortOrder</key>
			<integer>2</integer>
			<key>Description</key>
			<string>The SMJobKit service&apos;s base name</string>
			<key>EmptyReplacement</key>
			<string>ServiceName</string>
			<key>Type</key>
			<string>text</string>
			<key>RequiredOptions</key>
			<dict>
				<key>includeSMJobKitService</key>
				<string>true</string>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>smjServiceBundleIdentifier</string>
			<key>Name</key>
			<string>Service Identifier</string>
			<key>SortOrder</key>
			<integer>2</integer>
			<key>NotPersisted</key>
			<true/>
			<key>Description</key>
			<string>Your new service&apos;s bundle and launchd identifier</string>
			<key>Default</key>
			<string>___VARIABLE_bundleIdentifierPrefix:bundleIdentifier___.___VARIABLE_productName:RFC1034Identifier___.___VARIABLE_smjServiceName:RFC1034Identifier___</string>
			<key>Type</key>
			<string>static</string>
			<key>RequiredOptions</key>
			<dict>
				<key>includeSMJobKitService</key>
				<string>true</string>
			</dict>
		</dict>
	</array>
</dict>
</plist>
